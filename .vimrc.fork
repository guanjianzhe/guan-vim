" Modeline_and_Notes {
" vim: set sw=4 ts=4 sts=4 et tw=78 foldmarker={,} foldlevel=0 foldmethod=marker spell:
"
"
"    _______  __    __       ___      .__   __.      ____    ____  __  .___  ___.
"   /  _____||  |  |  |     /   \     |  \ |  |      \   \  /   / |  | |   \/   |
"  |  |  __  |  |  |  |    /  ^  \    |   \|  |  _____\   \/   /  |  | |  \  /  |
"  |  | |_ | |  |  |  |   /  /_\  \   |  . `  | |______\      /   |  | |  |\/|  |
"  |  |__| | |  `--'  |  /  _____  \  |  |\   |         \    /    |  | |  |  |  |
"   \______|  \______/  /__/     \__\ |__| \__|          \__/     |__| |__|  |__|
"
"
"   You can find me
"
"   Copyright 2016 guanjianzhe
"
" Modeline_and_Notes
" [X] Environment
" General
" Vim_UI
" Formatting
" Key_(re)Mappings
" Plugins .
" k_vim .
"
" }

" General {

    highlight clear CursorLineNr    " Remove highlight color from current line number
    " 突出显示当前列
    "set cursorcolumn
    " 突出显示当前行
    set cursorline

    " 设置 退出vim后，内容显示在终端屏幕, 可以用于查看和复制, 不需要可以去掉
    " 好处：误删什么的，如果以前屏幕打开，可以找回
    "set t_ti= t_te=

    "    " format
    "    " 解决中文问题
    "    set encoding=utf-8
    "    set fileencodings=utf-8,chinese,gb2312,gbk,gb18030,big5,latin-1

    lang messages zh_CN.UTF-8
    "解决consle输出乱码
    set encoding=utf-8
    "Vim 内部使用的编码，包括缓冲区，菜单（消息）文本
    set fileencoding=utf-8
    "vim当前编辑的文件的字符编码方式， vim保存文件时也使用这种方式（不管新文件是否如此）
    set fileencodings=ucs-bom,utf-8,chinese,latin1
    "vim启动时按照列出的字符编码方式逐一探测即将打开的文件的字符编码方式
    "set termencoding=utf-8
    "终端的字符编码方式
    language messages zh_CN.utf-8

" }

" Vim_UI {

    " if has('statusline') {
        set laststatus=2

        " Broken down into easily includeable segments
        set statusline=%<%f\                     " Filename
        set statusline+=%w%h%m%r                 " Options
        "if !exists('g:override_spf13_bundles')
            set statusline+=%{fugitive#statusline()} " Git Hotness
        "endif
        set statusline+=\ [%{&ff}/%Y]            " Filetype
        set statusline+=\ [%{getcwd()}]          " Current dir
        set statusline+=%=%-14.(%l,%c%V%)\ %p%%  " Right aligned file nav info
    " endif }

    if g:guan_background_switch == "light"
        set background=light
    endif

    if g:guan_background_switch == "dark"
        set background=dark
    endif

    "set background=light         " Assume a dark background
    "set background=dark
    set t_Co=256
    "let g:guan_theme = "solarized"
    if g:guan_theme  == "solarized"
        if 1 == 0
            set background=dark
            set t_Co=256
            let g:solarized_termcolors=256
            let g:solarized_termtrans=1
            let g:solarized_contrast="normal"
            let g:solarized_visibility="normal"
            color solarized  " Load a colorscheme"

            colorscheme solarized
        else
            "let g:solarized_termcolors=256
            "let g:solarized_termtrans=1
            let g:solarized_contrast="normal"
            let g:solarized_visibility="normal"
            "set nolist
            " g:solarized_visibility =  "normal" (default)   "high" or "low"
            " https://github.com/altercation/vim-colors-solarized/issues/5
            let g:solarized_visibility= "low"
            colorscheme solarized             " Load a colorscheme
        endif
        let g:airline_theme = 'solarized'
    elseif g:guan_theme  == 'molokai_dark'
        "colorscheme molokai
        colorscheme molokai_dark
        let g:airline_theme = 'molokai'
    elseif g:guan_theme  == 'tomorrow'
        "Tomrrow-Night hybrid zenburn
        colorscheme Tomorrow-Night
        let g:airline_theme = 'tomorrow'
    elseif g:guan_theme == 'hybrid'
        "set background=light         " Assume a dark background
        colorscheme hybrid
        let g:airline_theme = 'hybrid'
    elseif g:guan_theme == 'lucius'
        "set background=light         " Assume a dark background
        colorscheme lucius
        let g:airline_theme = 'lucius'
    elseif g:guan_theme == 'jellybeans'
        " jellybeans lucius
        colorscheme jellybeans
        let g:airline_theme = 'jellybeans'
    elseif g:guan_theme == 'kolor'
        colorschem kolor
        let g:airline_theme = 'kolor'
    elseif g:guan_theme == 'zenburn'
        "set background=light         " Assume a dark background
        colorscheme zenburn
        let g:airline_theme = 'zenburn'
    endif

    " hemisu ;looks good but no airline theme
        "colorscheme gruvbox  looks good but no airline theme
        "let g:airline_theme = 'gruvbox'
    "colorscheme monokai-chris
    "let g:airline_theme = 'molokai'
    "16 base
        "colorscheme wombat
        "let g:airline_theme = 'wombat'

    highlight clear SignColumn      " SignColumn should match background
    "highlight clear LineNr          " Current line number row will have same background color in relative mode

    "let &colorcolumn=join(range(81,999),",")   " 80以后高亮
    let &colorcolumn="80,".join(range(120,999),",")    " 80高亮 120后高亮
    "let &colorcolumn="80"

" }

" Formatting {
    " 设置环绕换行
    set wrap

    "set noexpandtab     " Tabs are STILL tabs, not spaces
" }

" Key_(re)Mappings {

    " FIXME: fix diffput tempolary
    nnoremap dp :diffput<CR>

    ""Fast Ex command
    "nnoremap ; :

    " set mapleader
    "let mapleader = ","
    "let g:mapleader = ","

    "  remap \ as , for repeat latest search in opposite direction.
    nnoremap \ ,

    " Some helpers to edit mode
    " http://vimcasts.org/e/14
    cnoremap %% <C-R>=fnameescape(expand('%:h')).'/'<cr>
    "map <leader>ew :e %%
    "map <leader>es :sp %%
    "map <leader>ev :vsp %%
    ""map <leader>et :tabe %%
    "map <leader>er :tabe ~/
    "map <leader>et :tab sp<cr>

    map <leader>vr :vertical res
    """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

    " 搜索相关
    " Map <Space> to / (search) and Ctrl-<Space> to ? (backwards search)
    "map <space> /
    " 进入搜索Use sane regexes"
    "nnoremap / /\v
    "vnoremap / /\v

    "" Keep search pattern at the center of the screen.
    "nnoremap <silent> n nzz
    "nnoremap <silent> N Nzz
    "nnoremap <silent> * *zz
    "nnoremap <silent> # #zz
    "nnoremap <silent> g* g*zz

    " Keep search pattern at the center of the screen.
    nnoremap <silent> n ntz
    nnoremap <silent> N Ntz
    nnoremap <silent> * *tz
    nnoremap <silent> # #tz
    nnoremap <silent> g* g*tz

    " 去掉搜索高亮
    noremap <silent><leader>/ :nohls<CR>

    " tab/buffer相关

    " 切换前后buffer
    nnoremap [b :bprevious<cr>
    nnoremap ]b :bnext<cr>

    if g:guan_oters_terminal == 0
        " 使用方向键切换buffer
        noremap <left> :cp<CR>
        noremap <right> :cn<CR>
        " 使用方向键切换c
        noremap <up> :lprevious<CR>
        noremap <down> :lnext<CR>
    endif

    " tab 操作
    " http://vim.wikia.com/wiki/Alternative_tab_navigation

    " http://stackoverflow.com/questions/2005214/switching-to-a-particular-tab-in-vim

    " tab切换
    map <leader>th :tabfirst<cr>
    map <leader>tl :tablast<cr>

    map <leader>tj :tabnext<cr>
    map <leader>tk :tabprev<cr>
    map <leader>tn :tabnext<cr>
    map <leader>tp :tabprev<cr>

    " 新建tab，关闭，？
    map <leader>te :tabedit<cr>
    map <leader>td :tabclose<cr>
    map <leader>tm :tabm<cr>

    " normal模式下切换到确切的tab
    noremap <leader>1 1gt
    noremap <leader>2 2gt
    noremap <leader>3 3gt
    noremap <leader>4 4gt
    noremap <leader>5 5gt
    noremap <leader>6 6gt
    noremap <leader>7 7gt
    noremap <leader>8 8gt
    noremap <leader>9 9gt
    noremap <leader>0 :tablast<cr>

    " Toggles between the active and last active tab "
    " The first tab is always 1 "
    let g:last_active_tab = 1
    " nnoremap <leader>gt :execute 'tabnext ' . g:last_active_tab<cr>
    " nnoremap <silent> <c-o> :execute 'tabnext ' . g:last_active_tab<cr>
    " vnoremap <silent> <c-o> :execute 'tabnext ' . g:last_active_tab<cr>
    "nnoremap <silent> <leader>tt :execute 'tabnext ' . g:last_active_tab<cr>
    autocmd TabLeave * let g:last_active_tab = tabpagenr()

    " 新建tab  Ctrl+t
    "nnoremap <C-t>     :tabnew<CR>
    "inoremap <C-t>     <Esc>:tabnew<CR>
    "
    nnoremap <C-n>     :tab sp<CR>
    "inoremap <C-n>     :tab sp<CR>

    " 命令行模式增强，ctrl - a到行首， -e 到行尾
    cnoremap <C-j> <t_kd>
    cnoremap <C-k> <t_ku>
    cnoremap <C-a> <Home>
    cnoremap <C-e> <End>

    " 滚动Speed up scrolling of the viewport slightly
    map <C-E> <ScrollWheelDown>
    nnoremap <C-e> 2<C-e>
    nnoremap <C-y> 2<C-y>

    " cursor position after pasting in vi / vim
    "http://unix.stackexchange.com/questions/5056/cursor-position-after-pasting-in-vi-vim
    noremap p gp
    noremap p gp
    noremap gP P
    noremap gP P

    """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
    function! PrintFn()
        echo "F1:"
        echo "F2: NERDTreeToggle\t"
        echo "F3: TagbarToggle"
        echo "F4: pastetoggle"

        echo "F5: HideNumber()"
        echo "F6: list! Toggle"
        echo "F7: wrap! Toggle"
        echo "F8: expandtab! Toggle<CR>"
        echo "Fx: ToggleSyntax"
        echo "F10: ToggleMouse()"
    endfunc
    nnoremap <F12> :call PrintFn()<CR>

    " F1 - F8 设置
    " F1 废弃这个键,防止调出系统帮助
    " I can type :help on my own, thanks.  Protect your fat fingers from the evils of <F1>
    noremap <F1> <Esc>"

    " F2 NERDTree开关
    nnoremap <F2> :NERDTreeToggle<CR>

    nnoremap <F3> :call ToggleLocationList()<CR>

    "Paste toggle - when pasting something in, don't indent.
    "set pastetoggle=<F5>
    "you also can :set paste, :set paste!
    " F5 粘贴开关，用于鼠标复制代码用
    set pastetoggle=<F4>            "    when in insert mode, press <F10> to go to
                                    "    paste mode, where you can paste mass data
                                    "    that won't be autoindented

    " F5 为方便复制，用<F5>开启/关闭行号显示:
    function! HideNumber()
        "if(&relativenumber == &number)
        "    set relativenumber! number!
        "elseif(&number)
        set number!
        "else
        "    set relativenumber!
        "endif
        set number?
    endfunc
    nnoremap <F5> :call HideNumber()<CR>

    " F6 显示可打印字符开关
    nnoremap <F6> :set list! list?<CR>
    " F7 换行开关
    nnoremap <F7> :set wrap! wrap?<CR>
    nnoremap <F8> :set expandtab! expandtab?<CR>    " Tabs are tabs, or spaces.

    "" F9 语法开关，关闭语法可以加快大文件的展示
    "function! ToggleSyntax()
    "    "if(&relativenumber == &number)
    "    "elseif(&number)
    "   "     "else
    "    "endif    <CR> :RainbowToggle
    "    set number?
    "endfunc
    "nnoremap <F9> :exec exists('syntax_on') ? 'syn off' : 'syn on'<CR>

    function! ToggleMouse()
        if(&mouse == 'a')
            set mouse=
            echo "Mouse usage \"Disabled\""
        else
            set mouse=a
            echo "Mouse usage \"Enabled\""
        endif
    endfunc
    nnoremap <F10> :call ToggleMouse()<CR>

    " disbale paste mode when leaving insert mode
    au InsertLeave * set nopaste

    " F2 set paste问题已解决, 粘贴代码前不需要按F2了
    " F2 粘贴模式paste_mode开关,用于有格式的代码粘贴
    " Automatically set paste mode in Vim when pasting in insert mode
    function! XTermPasteBegin()
      set pastetoggle=<Esc>[201~
      set paste
      return ""
    endfunction
    inoremap <special> <expr> <Esc>[200~ XTermPasteBegin()

    "EnhancedCommentify
    "vmap <F8> <Esc><Esc>:call EnhancedCommentify('yes','comment',line("'<"),line("'>"))<CR>
    "vmap <C-F8> <Esc><Esc>:call EnhancedCommentify('yes','decomment',line("'<"),line("'>"))<CR>
    ":autocmd FileType qf nmap <buffer> <cr> <cr>:lcl<cr>

    "compare files
    command! Difft windo diffthis
    command! Diffo windo diffoff

" }

" Plugins {

    " tmuxline  {
        " let vim using mouse drag to resize windows
        set mouse+=a
        if &term =~ '^screen'
            " tmux knows the extended mouse mode
            set ttymouse=xterm2
        endif

        " setting tmux color
        let g:airline#extensions#tmuxline#enabled = 0
        let g:tmuxline_theme = 'airline_insert'
        "let g:tmuxline_preset = 'full'
        "let g:tmuxline_preset = 'nightly_fox'
        "crosshair.vim  full.vim  minimal.vim  nightly_fox.vim  powerline.vim
        "righteous.vim  tmux.vim
        "run this onetime   :Tmuxline airline
    " }

    " TagBar {
        if isdirectory(expand("~/.vim/bundle/tagbar/"))
            "nnoremap <silent> <leader>tt :TagbarToggle<CR>
            nnoremap <F3> :TagbarToggle<CR>
            let g:tagbar_width = 35
            " sorted according to order in the source file.
            let g:tagbar_sort = 0
            " TODO: can not close tagbar.
            "autocmd BufEnter * nested :call tagbar#autoopen(0)
            autocmd FileType * nested :call tagbar#autoopen(0)
        endif
    " }

    " Fugitive {
        if isdirectory(expand("~/.vim/bundle/vim-fugitive/"))
            nnoremap <silent> <leader>gd :Gvdiff<CR>
            " Mnemonic _i_nteractive
        endif
    "}

    " Syntastic {

        "let g:syntastic_always_populate_loc_list = 1
        " 不要自动关闭location list
        let g:syntastic_auto_loc_list = 0
        " let g:syntastic_auto_loc_list = 0

        "http://stackoverflow.com/questions/20030603/vim-syntastic-how-to-disable-the-checker
        let g:syntastic_enable_signs = 0
        let g:syntastic_mode_map = { 'mode': 'passive', 'active_filetypes': [],'passive_filetypes': [] }
        nnoremap <C-w>E :SyntasticCheck<CR> :SyntasticToggleMode<CR>

    " }
    " markdown {
       " Plug 'plasticboy/vim-markdown', {'for': 'md'}
       " " https://github.com/suan/vim-instant-markdown
       " " npm -g install instant-markdown-d
       " " Plug 'suan/vim-instant-markdown'
       " " let g:instant_markdown_slow = 1
       " " let g:instant_markdown_autostart = 0
       " " map <F12> :InstantMarkdownPreview<CR>
    "}

    " easymotion {
        "map <Leader> <Plug>(easymotion-prefix)
        "    " <Leader>f{char} to move to {char}
        "    map  <Leader>f <Plug>(easymotion-bd-f)
        "    nmap <Leader>f <Plug>(easymotion-overwin-f)
        "
            " s{char}{char} to move to {char}{char}
            nmap s <Plug>(easymotion-overwin-f2)
        "
        "    " Move to line
            map <Leader>L <Plug>(easymotion-bd-jk)
            nmap <Leader>L <Plug>(easymotion-overwin-line)
        "
        "   " Move to word
        "    map  <Leader>ew <Plug>(easymotion-bd-w)
        "    nmap <Leader>ew <Plug>(easymotion-overwin-w)
    " }

    " cscope.vim(brookhong) {

        "Below is the minimum key mappings.
        nnoremap <leader>fa :call CscopeFindInteractive(expand('<cword>'))<CR>
        nnoremap <leader>l :call ToggleLocationList()<CR>

        "Some optional key mappings to search directly.
        " s: Find this C symbol
        nnoremap  <leader>fs :call CscopeFind('s', expand('<cword>'))<CR>
        " g: Find this definition
        nnoremap  <leader>fg :call CscopeFind('g', expand('<cword>'))<CR>
        " d: Find functions called by this function
        nnoremap  <leader>fd :call CscopeFind('d', expand('<cword>'))<CR>
        " c: Find functions calling this function
        nnoremap  <leader>fc :call CscopeFind('c', expand('<cword>'))<CR>
        " t: Find this text string
        nnoremap  <leader>ft :call CscopeFind('t', expand('<cword>'))<CR>
        " e: Find this egrep pattern
        nnoremap  <leader>fe :call CscopeFind('e', expand('<cword>'))<CR>
        " f: Find this file
        "nnoremap  <leader>ff :call CscopeFind('f', expand('<cword>'))<CR>
        " i: Find files #including this file
        nnoremap  <leader>fi :call CscopeFind('i', expand('<cword>'))<CR>
        " 不再提示更新
        let g:cscope_silent=1

    " }

    " indent_guides {

      " if isdirectory(expand("~/.vim/bundle/vim-indent-guides/"))
              let g:indent_guides_start_level = 2
              let g:indent_guides_guide_size = 1
              let g:indent_guides_tab_guides = 0
              let g:indent_guides_enable_on_vim_startup = 0

      "" indent
      "" <leader>ig to trigger
      "let g:indent_guides_start_level = 2
      "let g:indent_guides_guide_size = 1
      let g:indent_guides_auto_colors = 1
      "autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd  ctermbg=black
      "autocmd VimEnter,Colorscheme * :hi IndentGuidesEven ctermbg=black
      "    endif

    " }

    " ctrlp {

        if isdirectory(expand("~/.vim/bundle/ctrlp.vim/"))
            map <leader>ru :CtrlPMRU<CR>
            map <leader>; :CtrlPMRU<CR>
            "nnoremap <F3> :CtrlPMRU<CR>
            "let g:ctrlp_prompt_mappings = { 'ToggleMRURelative()': ['<F2>'] }
        endif

    "}

    " airline {
        let g:airline_powerline_fonts = 1
        " " take care don't change it later
        " "set t_Co=256

         " symbols
        if g:guan_oters_terminal == 1
            if !exists('g:airline_symbols')
                let g:airline_symbols = {}
            endif
            ""let g:airline_symbols.space = "\ua0"
            "let g:airline_left_sep = '▶'
            "let g:airline_left_alt_sep = '❯'
            "let g:airline_right_sep = '◀'
            "let g:airline_right_alt_sep = '❮'
            "" let g:airline_symbols.linenr = '¶'
            "let g:airline_symbols.branch = '-b'
            "" let g:airline_symbols.branch = '⎇'
        endif


        " TODO: put this to really .vimrc.local later...
        let g:airline#extensions#whitespace#enabled = 0
        "let g:airline#extensions#whitespace#mixed_indent_algo = 0 (default)
        "let g:airline#extensions#whitespace#enabled = 1
        ""* configure the formatting of the warning messages. >
        "  let g:airline#extensions#whitespace#trailing_format = 'trailing[%s]'
        "  let g:airline#extensions#whitespace#mixed_indent_format = 'mixed-indent[%s]'
        "  let g:airline#extensions#whitespace#long_format = 'long[%s]'
        "  let g:airline#extensions#whitespace#mixed_indent_file_format = 'mix-indent-file[%s]'

        " "TODO
        "set ambiwidth=double
        "set noshowmode
        " 如果模式切换慢，则设置：
        " 和快捷键有冲突
        " 其实不是冲突，是<leader>要按快点
        " 改回默认值1000
        "set timeoutlen=380
        " 是否打开tabline
        let g:airline#extensions#tabline#enabled = 1
        " tab序号的类型
        let g:airline#extensions#tabline#tab_nr_type = 1
        let g:airline#extensions#tabline#buffer_idx_mode = 1
        nmap <leader>1 <Plug>AirlineSelectTab1
        nmap <leader>2 <Plug>AirlineSelectTab2
        nmap <leader>3 <Plug>AirlineSelectTab3
        nmap <leader>4 <Plug>AirlineSelectTab4
        nmap <leader>5 <Plug>AirlineSelectTab5
        nmap <leader>6 <Plug>AirlineSelectTab6
        nmap <leader>7 <Plug>AirlineSelectTab7
        nmap <leader>8 <Plug>AirlineSelectTab8
        nmap <leader>9 <Plug>AirlineSelectTab9
        nmap <leader>- <Plug>AirlineSelectPrevTab
        nmap <leader>+ <Plug>AirlineSelectNextTab

        " control which sections get truncated and at what width.
          let g:airline#extensions#default#section_truncate_width = {
              \ 'a': 120,
              \ 'b': 140,
              \ 'x': 80,
              \ 'y': 180,
              \ 'z': 110,
              \ 'warning': 80,
              \ 'error': 80,
              \ }

        " tabline 路径类型
        "let g:airline#extensions#tabline#fnamemod = ':p:.'
        " Just show the filename (no path) in the tab
        let g:airline#extensions#tabline#fnamemod = ':t'

        " configure separators for the tabline only.
        let g:airline#extensions#tabline#left_sep = '|'
        let g:airline#extensions#tabline#left_alt_sep = '|'
        let g:airline#extensions#tabline#right_sep = '|'
        let g:airline#extensions#tabline#right_alt_sep = '|'
        " set ttimeoutlen=50
        " 显示完整路径
        "let g:airline_section_b=airline#section#create(['%F'])

        "let g:airline_section_b='%{strftime("%c")}'
        "let g:airline_section_c='BN: %{bufnr("%")}'

    "}

   " NerdTree {
        if isdirectory(expand("~/.vim/bundle/vim-nerdtree-tabs"))
            let g:nerdtree_tabs_open_on_new_tab = 1
            let g:nerdtree_tabs_open_on_console_startup = 1
        endif
        if isdirectory(expand("~/.vim/bundle/nerdtree"))
            "map <C-e> <plug>NERDTreeTabsToggle<CR>
            map <leader>nt  <plug>NERDTreeTabsToggle<CR>
            "map <leader>ne :NERDTreeFind<CR>
            nmap <leader>nf :NERDTreeFind<CR>

            let NERDTreeShowBookmarks=1
            let NERDTreeIgnore=['builtin', 'out', 'tags', '\.cmd$', '\.py[cd]$', '\~$', '\.swo$', '\.swp$', '^\.git$', '^\.hg$', '^\.svn$', '\.bzr$', '\.o$']
            let NERDTreeChDirMode=0
            let NERDTreeQuitOnOpen=0
            let NERDTreeMouseMode=2
            let NERDTreeShowHidden=1
            let NERDTreeKeepTreeInNewTab=1
            let g:nerdtree_tabs_open_on_console_startup = 0
        endif
    "}

    " Rainbow {
        if isdirectory(expand("~/.vim/bundle/rainbow/"))
            "let g:rainbow_active = 0 "0 if you want to enable it later via :RainbowToggle
            nmap <leader>rb :RainbowToggle<CR>
            "let lightcolors =  ['lightblue', 'lightyellow', 'red', 'darkgreen', 'darkyellow', 'lightred', 'yellow', 'cyan', 'magenta', 'white']
            let lightcolors =  ['Darkyellow', 'Magenta', 'Red', 'DarkGreen', 'cyan']
            "let darkcolors = ['DarkBlue', 'Magenta', 'Black', 'Red', 'DarkGray', 'DarkGreen', 'DarkYellow']
            "let darkcolors = ['DarkBlue', 'Magenta', 'DarkGray', 'DarkYellow', 'DarkGreen', 'Red', 'Gray']
            let darkcolors = ['DarkBlue', 'DarkGreen', 'DarkGray', 'Red', 'Magenta', 'DarkYellow', 'Gray']
            let g:rainbow_conf = {
                        \   'ctermfgs': (&background=="light"? darkcolors : lightcolors)
                        \}
        endif
    "}

    " YouCompleteMe {
        " ################### 自动补全 ###################
        "youcompleteme  默认tab  s-tab 和自动补全冲突
        "let g:ycm_key_list_select_completion=['<c-n>']
        let g:ycm_key_list_select_completion = ['<Down>']
        "let g:ycm_key_list_previous_completion=['<c-p>']
        let g:ycm_key_list_previous_completion = ['<Up>']
        let g:ycm_complete_in_comments = 1  "在注释输入中也能补全
        let g:ycm_complete_in_strings = 1   "在字符串输入中也能补全
        let g:ycm_use_ultisnips_completer = 1 "提示UltiSnips
        let g:ycm_collect_identifiers_from_comments_and_strings = 1   "注释和字符串中的文字也会被收入补全
        let g:ycm_collect_identifiers_from_tags_files = 1
        " 开启语法关键字补全
        let g:ycm_seed_identifiers_with_syntax=1

        "let g:ycm_seed_identifiers_with_syntax=1   "语言关键字补全, 不过python关键字都很短，所以，需要的自己打开

        "" 跳转到定义处, 分屏打开
        "let g:ycm_goto_buffer_command = 'horizontal-split'
        "" nnoremap <leader>jd :YcmCompleter GoToDefinition<CR>
        "nnoremap <leader>jd :YcmCompleter GoToDefinitionElseDeclaration<CR>
        "nnoremap <leader>gd :YcmCompleter GoToDeclaration<CR>

        " 引入，可以补全系统，以及python的第三方包 针对新老版本YCM做了兼容
        " old version
        if !empty(glob("~/.vim/bundle/YouCompleteMe/cpp/ycm/.ycm_extra_conf.py"))
            let g:ycm_global_ycm_extra_conf = "~/.vim/bundle/YouCompleteMe/cpp/ycm/.ycm_extra_conf.py"
        endif
        " new version
        if !empty(glob("~/.vim/bundle/YouCompleteMe/third_party/ycmd/cpp/ycm/.ycm_extra_conf.py"))
            let g:ycm_global_ycm_extra_conf = "~/.vim/bundle/YouCompleteMe/third_party/ycmd/cpp/ycm/.ycm_extra_conf.py"
        endif

        " 直接触发自动补全 insert模式下
        let g:ycm_key_invoke_completion = '<c-y>'
        "let g:ycm_key_invoke_completion = '<F9>'
        " 设置转到定义处的快捷键，这个功能非常赞
        nmap <leader>jd :YcmCompleter GoToDefinitionElseDeclaration <C-R>=expand("<cword>")<CR><CR>

        " 黑名单,不启用
        let g:ycm_filetype_blacklist = {
            \ 'tagbar' : 1,
            \ 'gitcommit' : 1,
            \}
    " }

    " easyalign {
        vmap <Leader>a <Plug>(EasyAlign)
        nmap <Leader>a <Plug>(EasyAlign)
        if !exists('g:easy_align_delimiters')
        let g:easy_align_delimiters = {}
        endif
        let g:easy_align_delimiters['#'] = { 'pattern': '#', 'ignore_groups': ['String'] }
    " }

" }

" k_vim {

    """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
    "merge k-vim by guan                    """"""""""""""""""""""""""""""""""""
    """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

    "==========================================
    " Author:  wklken
    " Version: 9.1
    " Email: wklken@yeah.net
    " BlogPost: http://www.wklken.me
    " ReadMe: README.md
    " Donation: http://www.wklken.me/pages/donation.html
    " Last_modify: 2015-12-15
    " Sections:
    "       -> Initial Plugin 加载插件
    "       -> General Settings 基础设置
    "       -> Display Settings 展示/排版等界面格式设置
    "       -> FileEncode Settings 文件编码设置
    "       -> Others 其它配置
    "       -> HotKey Settings  自定义快捷键
    "       -> FileType Settings  针对文件类型的设置
    "       -> Theme Settings  主题设置
    "
    "       -> 插件配置和具体设置在vimrc.bundles中
    "==========================================
    "
    ""==========================================
    "" Initial Plugin 加载插件
    ""==========================================
    "
    "" 修改leader键
    "let mapleader = ','
    "let g:mapleader = ','
    "
    "" 开启语法高亮
    "syntax on
    "
    "" install bundles
    "if filereadable(expand("~/.vimrc.bundles"))
    "  source ~/.vimrc.bundles
    "endif
    "
    "" ensure ftdetect et al work by including this after the bundle stuff
    "filetype plugin indent on
    "
    "" NOTE: 以下配置有详细说明，一些特性不喜欢可以直接注解掉
    "
    ""==========================================
    "" General Settings 基础设置
    ""==========================================
    "
    "
    "" history存储容量
    "set history=2000
    "
    "" 检测文件类型
    "filetype on
    "" 针对不同的文件类型采用不同的缩进格式
    "filetype indent on
    "" 允许插件
    "filetype plugin on
    "" 启动自动补全
    "filetype plugin indent on
    "
    "" 文件修改之后自动载入
    "set autoread
    " 启动的时候不显示那个援助乌干达儿童的提示
    set shortmess=atI
    "
    "" 备份,到另一个位置. 防止误删, 目前是取消备份
    ""set backup
    ""set backupext=.bak
    ""set backupdir=/tmp/vimbk/
    "
    "" 取消备份。 视情况自己改
    "set nobackup
    "" 关闭交换文件
    "set noswapfile
    "
    "
    "" TODO: remove this, use gundo
    "" create undo file
    "" if has('persistent_undo')
    "  " " How many undos
    "  " set undolevels=1000
    "  " " number of lines to save for undo
    "  " set undoreload=10000
    "  " " So is persistent undo ...
    "  " "set undofile
    "  " set noundofile
    "  " " set undodir=/tmp/vimundo/
    "" endif
    "
    "set wildignore=*.swp,*.bak,*.pyc,*.class,.svn
    "
    "" 突出显示当前列
    "set cursorcolumn
    "" 突出显示当前行
    "set cursorline
    "
    "
    "" 设置 退出vim后，内容显示在终端屏幕, 可以用于查看和复制, 不需要可以去掉
    "" 好处：误删什么的，如果以前屏幕打开，可以找回
    "set t_ti= t_te=
    "
    "
    "" 鼠标暂不启用, 键盘党....
    "set mouse-=a
    "" 启用鼠标
    "" set mouse=a
    "" Hide the mouse cursor while typing
    "" set mousehide
    "
    "
    "" 修复ctrl+m 多光标操作选择的bug，但是改变了ctrl+v进行字符选中时将包含光标下的字符
    "set selection=inclusive
    "set selectmode=mouse,key
    "
    "" change the terminal's title
    "set title
    "" 去掉输入错误的提示声音
    "set novisualbell
    "set noerrorbells
    "set t_vb=
    "set tm=500
    "
    "" Remember info about open buffers on close
    "set viminfo^=%
    "
    "" For regular expressions turn magic on
    "set magic
    "
    "" Configure backspace so it acts as it should act
    "set backspace=eol,start,indent
    "set whichwrap+=<,>,h,l
    "
    ""==========================================
    "" Display Settings 展示/排版等界面格式设置
    ""==========================================
    "
    "" 显示当前的行号列号
    "set ruler
    "" 在状态栏显示正在输入的命令
    "set showcmd
    "" 左下角显示当前vim模式
    "set showmode
    "
    "" 在上下移动光标时，光标的上方或下方至少会保留显示的行数
    "set scrolloff=7
    "
    "" set winwidth=79
    "
    "" 命令行（在状态行下）的高度，默认为1，这里是2
    "set statusline=%<%f\ %h%m%r%=%k[%{(&fenc==\"\")?&enc:&fenc}%{(&bomb?\",BOM\":\"\")}]\ %-14.(%l,%c%V%)\ %P
    "" Always show the status line - use 2 lines for the status bar
    "set laststatus=2
    "
    "" 显示行号
    "set number
    "" 取消换行
    "set nowrap
    "
    "" 括号配对情况, 跳转并高亮一下匹配的括号
    "set showmatch
    "" How many tenths of a second to blink when matching brackets
    "set matchtime=2
    "
    "
    "" 设置文内智能搜索提示
    "" 高亮search命中的文本
    "set hlsearch
    "" 打开增量搜索模式,随着键入即时搜索
    "set incsearch
    "" 搜索时忽略大小写
    "set ignorecase
    "" 有一个或以上大写字母时仍大小写敏感
    "set smartcase
    "
    "" 代码折叠
    "set foldenable
    "" 折叠方法
    "" manual    手工折叠
    "" indent    使用缩进表示折叠
    "" expr      使用表达式定义折叠
    "" syntax    使用语法定义折叠
    "" diff      对没有更改的文本进行折叠
    "" marker    使用标记进行折叠, 默认标记是 {{{ 和 }}}
    "set foldmethod=indent
    "set foldlevel=99
    "" 代码折叠自定义快捷键 <leader>zz
    "let g:FoldMethod = 0
    "map <leader>zz :call ToggleFold()<cr>
    "fun! ToggleFold()
    "    if g:FoldMethod == 0
    "        exe "normal! zM"
    "        let g:FoldMethod = 1
    "    else
    "        exe "normal! zR"
    "        let g:FoldMethod = 0
    "    endif
    "endfun
    "
    "" 缩进配置
    "" Smart indent
    "set smartindent
    "" 打开自动缩进
    "" never add copyindent, case error   " copy the previous indentation on autoindenting
    "set autoindent
    "
    "" tab相关变更
    "" 设置Tab键的宽度        [等同的空格个数]
    "set tabstop=4
    "" 每一次缩进对应的空格数
    "set shiftwidth=4
    "" 按退格键时可以一次删掉 4 个空格
    "set softtabstop=4
    "" insert tabs on the start of a line according to shiftwidth, not tabstop 按退格键时可以一次删掉 4 个空格
    "set smarttab
    "" 将Tab自动转化成空格[需要输入真正的Tab键时，使用 Ctrl+V + Tab]
    "set expandtab
    "" 缩进时，取整 use multiple of shiftwidth when indenting with '<' and '>'
    "set shiftround
    "
    "" A buffer becomes hidden when it is abandoned
    "set hidden
    "set wildmode=list:longest
    "set ttyfast
    "
    "" 00x增减数字时使用十进制
    "set nrformats=
    "
    "" 相对行号: 行号变成相对，可以用 nj/nk 进行跳转
    "set relativenumber number
    "au FocusLost * :set norelativenumber number
    "au FocusGained * :set relativenumber
    "" 插入模式下用绝对行号, 普通模式下用相对
    "autocmd InsertEnter * :set norelativenumber number
    "autocmd InsertLeave * :set relativenumber
    function! NumberToggle()
      if(&relativenumber == 1)
        set norelativenumber number
      else
        set relativenumber
      endif
    endfunc
    nnoremap <leader>nn   :call NumberToggle()<cr>
    "nnoremap <C-N> :call NumberToggle()<cr>
    "
    ""==========================================
    "" FileEncode Settings 文件编码,格式
    ""==========================================
    "" 设置新文件的编码为 UTF-8
    "set encoding=utf-8
    "" 自动判断编码时，依次尝试以下编码：
    "set fileencodings=ucs-bom,utf-8,cp936,gb18030,big5,euc-jp,euc-kr,latin1
    "set helplang=cn
    ""set langmenu=zh_CN.UTF-8
    ""set enc=2byte-gb18030
    "" 下面这句只影响普通模式 (非图形界面) 下的 Vim
    "set termencoding=utf-8
    "
    "" Use Unix as the standard file type
    "set ffs=unix,dos,mac
    "
    "" 如遇Unicode值大于255的文本，不必等到空格再折行
    "set formatoptions+=m
    "" 合并两行中文时，不在中间加空格
    "set formatoptions+=B
    "
    "
    "==========================================
    " others 其它设置
    "==========================================
    " vimrc文件修改之后自动加载, windows
    autocmd! bufwritepost _vimrc source %
    " vimrc文件修改之后自动加载, linux
    autocmd! bufwritepost .vimrc source %
    autocmd! bufwritepost .vimrc.fork source %
    autocmd! bufwritepost .vimrc.local source %
    autocmd! bufwritepost .vimrc.before source %
    autocmd! bufwritepost .vimrc.before.fork source %
    autocmd! bufwritepost .vimrc.before.local source %
    autocmd! bufwritepost .vimrc.bundles source %
    autocmd! bufwritepost .vimrc.bundles.fork source %
    autocmd! bufwritepost .vimrc.bundles.local source %

    " TODO
    "autocmd! bufwritepost .vimrc.local source %

    "" 自动补全配置
    "" 让Vim的补全菜单行为与一般IDE一致(参考VimTip1228)
    "set completeopt=longest,menu
    "
    "" 增强模式中的命令行自动完成操作
    "set wildmenu
    "" Ignore compiled files
    "set wildignore=*.o,*~,*.pyc,*.class
    "
    "" 离开插入模式后自动关闭预览窗口
    "autocmd InsertLeave * if pumvisible() == 0|pclose|endif
    "
    "" 回车即选中当前项
    "inoremap <expr> <CR>       pumvisible() ? "\<C-y>" : "\<CR>"
    "
    "" In the quickfix window, <CR> is used to jump to the error under the
    "" cursor, so undefine the mapping there.
    "autocmd BufReadPost quickfix nnoremap <buffer> <CR> <CR>
    "" quickfix window  s/v to open in split window,  ,gd/,jd => quickfix window => open it
    "autocmd BufReadPost quickfix nnoremap <buffer> v <C-w><Enter><C-w>L
    "autocmd BufReadPost quickfix nnoremap <buffer> s <C-w><Enter><C-w>K
    "
    "" command-line window
    "autocmd CmdwinEnter * nnoremap <buffer> <CR> <CR>
    "
    "
    "" 上下左右键的行为 会显示其他信息
    "inoremap <expr> <Down>     pumvisible() ? "\<C-n>" : "\<Down>"
    "inoremap <expr> <Up>       pumvisible() ? "\<C-p>" : "\<Up>"
    "inoremap <expr> <PageDown> pumvisible() ? "\<PageDown>\<C-p>\<C-n>" : "\<PageDown>"
    "inoremap <expr> <PageUp>   pumvisible() ? "\<PageUp>\<C-p>\<C-n>" : "\<PageUp>"
    "
    "" 打开自动定位到最后编辑的位置, 需要确认 .viminfo 当前用户可写
    "if has("autocmd")
    "  au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
    "endif
    "
    ""==========================================
    "" HotKey Settings  自定义快捷键设置
    ""==========================================
    "
    "" 主要按键重定义
    "
    "" 关闭方向键, 强迫自己用 hjkl
    "map <Left> <Nop>
    "map <Right> <Nop>
    "map <Up> <Nop>
    "map <Down> <Nop>
    "
    ""Treat long lines as break lines (useful when moving around in them)
    ""se swap之后，同物理行上线直接跳
    "nnoremap k gk
    "nnoremap gk k
    "nnoremap j gj
    "nnoremap gj j
    "
    "" F1 - F6 设置
    "
    " F1 废弃这个键,防止调出系统帮助
    " I can type :help on my own, thanks.  Protect your fat fingers from the evils of <F1>
    noremap <F1> <Esc>"

    "" F2 行号开关，用于鼠标复制代码用
    "" 为方便复制，用<F2>开启/关闭行号显示:
    "function! HideNumber()
    "  if(&relativenumber == &number)
    "    set relativenumber! number!
    "  elseif(&number)
    "    set number!
    "  else
    "    set relativenumber!
    "  endif
    "  set number?
    "endfunc
    "nnoremap <F2> :call HideNumber()<CR>
    "" F3 显示可打印字符开关
    "nnoremap <F3> :set list! list?<CR>
    "" F4 换行开关
    "nnoremap <F4> :set wrap! wrap?<CR>
    "
    "" F6 语法开关，关闭语法可以加快大文件的展示
    "nnoremap <F6> :exec exists('syntax_on') ? 'syn off' : 'syn on'<CR>
    "
    "set pastetoggle=<F5>            "    when in insert mode, press <F5> to go to
    "                                "    paste mode, where you can paste mass data
    "                                "    that won't be autoindented
    "
    "" disbale paste mode when leaving insert mode
    "au InsertLeave * set nopaste
    "
    "" F5 set paste问题已解决, 粘贴代码前不需要按F5了
    "" F5 粘贴模式paste_mode开关,用于有格式的代码粘贴
    "" Automatically set paste mode in Vim when pasting in insert mode
    "function! XTermPasteBegin()
    "  set pastetoggle=<Esc>[201~
    "  set paste
    "  return ""
    "endfunction
    "inoremap <special> <expr> <Esc>[200~ XTermPasteBegin()
    "
    "
    "
    "" 分屏窗口移动, Smart way to move between windows
    "map <C-j> <C-W>j
    "map <C-k> <C-W>k
    "map <C-h> <C-W>h
    "map <C-l> <C-W>l
    "
    "
    " http://stackoverflow.com/questions/13194428/is-better-way-to-zoom-windows-in-vim-than-zoomwin
    " Zoom / Restore window.
    function! s:ZoomToggle() abort
        if exists('t:zoomed') && t:zoomed
            execute t:zoom_winrestcmd
            let t:zoomed = 0
        else
            let t:zoom_winrestcmd = winrestcmd()
            resize
            vertical resize
            let t:zoomed = 1
        endif
    endfunction
    command! ZoomToggle call s:ZoomToggle()
    nnoremap <silent> <Leader>z :ZoomToggle<CR>

    "
    "" Go to home and end using capitalized directions
    "noremap H ^
    "noremap L $
    "
    "
    "" Map ; to : and save a million keystrokes 用于快速进入命令行
    "nnoremap ; :
    "
    "
    "" 命令行模式增强，ctrl - a到行首， -e 到行尾
    "cnoremap <C-j> <t_kd>
    "cnoremap <C-k> <t_ku>
    "cnoremap <C-a> <Home>
    "cnoremap <C-e> <End>
    "
    "
    "" 搜索相关
    "" Map <Space> to / (search) and Ctrl-<Space> to ? (backwards search)
    "map <space> /
    "" 进入搜索Use sane regexes"
    "nnoremap / /\v
    "vnoremap / /\v
    "
    "" Keep search pattern at the center of the screen.
    "nnoremap <silent> n nzz
    "nnoremap <silent> N Nzz
    "nnoremap <silent> * *zz
    "nnoremap <silent> # #zz
    "nnoremap <silent> g* g*zz
    "
    "" 去掉搜索高亮
    "noremap <silent><leader>/ :nohls<CR>
    "
    "" switch # *
    "nnoremap # *
    "nnoremap * #
    "
    "" for # indent, python文件中输入新行时#号注释不切回行首
    "autocmd BufNewFile,BufRead *.py inoremap # X<c-h>#
    "
    "
    "" tab/buffer相关
    "
    "" 切换前后buffer
    "nnoremap [b :bprevious<cr>
    "nnoremap ]b :bnext<cr>
    "" 使用方向键切换buffer
    "noremap <left> :bp<CR>
    "noremap <right> :bn<CR>
    "
    "
    "" tab 操作
    "" http://vim.wikia.com/wiki/Alternative_tab_navigation
    "" http://stackoverflow.com/questions/2005214/switching-to-a-particular-tab-in-vim
    "
    "" tab切换
    "map <leader>th :tabfirst<cr>
    "map <leader>tl :tablast<cr>
    "
    "map <leader>tj :tabnext<cr>
    "map <leader>tk :tabprev<cr>
    "map <leader>tn :tabnext<cr>
    "map <leader>tp :tabprev<cr>
    "
    "map <leader>te :tabedit<cr>
    "map <leader>td :tabclose<cr>
    "map <leader>tm :tabm<cr>
    "
    "" normal模式下切换到确切的tab
    "noremap <leader>1 1gt
    "noremap <leader>2 2gt
    "noremap <leader>3 3gt
    "noremap <leader>4 4gt
    "noremap <leader>5 5gt
    "noremap <leader>6 6gt
    "noremap <leader>7 7gt
    "noremap <leader>8 8gt
    "noremap <leader>9 9gt
    "noremap <leader>0 :tablast<cr>
    "
    "" Toggles between the active and last active tab "
    "" The first tab is always 1 "
    "let g:last_active_tab = 1
    "" nnoremap <leader>gt :execute 'tabnext ' . g:last_active_tab<cr>
    "" nnoremap <silent> <c-o> :execute 'tabnext ' . g:last_active_tab<cr>
    "" vnoremap <silent> <c-o> :execute 'tabnext ' . g:last_active_tab<cr>
    "nnoremap <silent> <leader>tt :execute 'tabnext ' . g:last_active_tab<cr>
    "autocmd TabLeave * let g:last_active_tab = tabpagenr()
    "
    "" 新建tab  Ctrl+t
    "nnoremap <C-t>     :tabnew<CR>
    "inoremap <C-t>     <Esc>:tabnew<CR>
    "
    "
    "" => 选中及操作改键
    "
    "" 调整缩进后自动选中，方便再次操作
    "vnoremap < <gv
    "vnoremap > >gv
    "
    "" y$ -> Y Make Y behave like other capitals
    "map Y y$
    "
    "" 复制选中区到系统剪切板中
    "vnoremap <leader>y "+y
    "
    "" auto jump to end of select
    "" vnoremap <silent> y y`]
    "" vnoremap <silent> p p`]
    "" nnoremap <silent> p p`]
    "
    "" select all
    "map <Leader>sa ggVG"
    "
    " select block
    " nnoremap <leader>v V`右大括号
    "
    "" w!! to sudo & write a file
    "cmap w!! w !sudo tee >/dev/null %
    "
    "" kj 替换 Esc
    "inoremap kj <Esc>
    "
    "" 滚动Speed up scrolling of the viewport slightly
    "nnoremap <C-e> 2<C-e>
    "nnoremap <C-y> 2<C-y>
    "
    "
    "" Jump to start and end of line using the home row keys
    "" 增强tab操作, 导致这个会有问题, 考虑换键
    ""nmap t o<ESC>k
    ""nmap T O<ESC>j

    " Quickly close the current window
    nnoremap <leader>q :q<CR>

    " Quickly save the current file
    nnoremap <leader>w :w<CR>

    "" 交换 ' `, 使得可以快速使用'跳到marked位置
    "nnoremap ' `
    "nnoremap ` '
    "
    "" remap U to <C-r> for easier redo
    "nnoremap U <C-r>
    "
    "" Quickly edit/reload the vimrc file
    "nmap <silent> <leader>ev :e $MYVIMRC<CR>
    "nmap <silent> <leader>sv :so $MYVIMRC<CR>
    "
    ""==========================================
    "" FileType Settings  文件类型设置
    ""==========================================
    "
    " 具体编辑文件类型的一般设置，比如不要 tab 等
    "autocmd FileType python set tabstop=4 shiftwidth=4 expandtab ai
    "autocmd FileType ruby,javascript,html,css,xml set tabstop=2 shiftwidth=2 softtabstop=2 expandtab ai
    autocmd FileType c,h set noexpandtab
    "autocmd BufRead,BufNewFile *.md,*.mkd,*.markdown set filetype=markdown.mkd
    "autocmd BufRead,BufNewFile *.part set filetype=html
    "" disable showmatch when use > in php
    "au BufWinEnter *.php set mps-=<:>
    "
    "
    "
    "" 保存python文件时删除多余空格
    "fun! <SID>StripTrailingWhitespaces()
    "    let l = line(".")
    "    let c = col(".")
    "    %s/\s\+$//e
    "    call cursor(l, c)
    "endfun
    "autocmd FileType c,cpp,java,go,php,javascript,puppet,python,rust,twig,xml,yml,perl autocmd BufWritePre <buffer> :call <SID>StripTrailingWhitespaces()
    "
    "
    "" 定义函数AutoSetFileHead，自动插入文件头
    "autocmd BufNewFile *.sh,*.py exec ":call AutoSetFileHead()"
    "function! AutoSetFileHead()
    "    "如果文件类型为.sh文件
    "    if &filetype == 'sh'
    "        call setline(1, "\#!/bin/bash")
    "    endif
    "
    "    "如果文件类型为python
    "    if &filetype == 'python'
    "        call setline(1, "\#!/usr/bin/env python")
    "        call append(1, "\# encoding: utf-8")
    "    endif
    "
    "    normal G
    "    normal o
    "    normal o
    "endfunc
    "
    "
    "" 设置可以高亮的关键字
    "if has("autocmd")
    "  " Highlight TODO, FIXME, NOTE, etc.
    "  if v:version > 701
    "    autocmd Syntax * call matchadd('Todo',  '\W\zs\(TODO\|FIXME\|CHANGED\|DONE\|XXX\|BUG\|HACK\)')
    "    autocmd Syntax * call matchadd('Debug', '\W\zs\(NOTE\|INFO\|IDEA\|NOTICE\)')
    "  endif
    "endif
    "
    ""==========================================
    "" TEMP 设置, 尚未确定要不要
    ""==========================================
    "
    "" tmux
    "" function! WrapForTmux(s)
    ""   if !exists('$TMUX')
    ""     return a:s
    ""   endif
    ""
    ""   let tmux_start = "\<Esc>Ptmux;"
    ""   let tmux_end = "\<Esc>\\"
    ""
    ""   return tmux_start . substitute(a:s, "\<Esc>", "\<Esc>\<Esc>", 'g') . tmux_end
    "" endfunction
    ""
    "" let &t_SI .= WrapForTmux("\<Esc>[?2004h")
    "" let &t_EI .= WrapForTmux("\<Esc>[?2004l")
    "
    "" allows cursor change in tmux mode
    "" let &t_SI = "\<Esc>]50;CursorShape=1\x7"
    "" let &t_EI = "\<Esc>]50;CursorShape=0\x7"
    "" if exists('$TMUX')
    "    " let &t_SI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=1\x7\<Esc>\\"
    "    " let &t_EI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=0\x7\<Esc>\\"
    "" endif
    "
    "
    ""==========================================
    "" Theme Settings  主题设置
    ""==========================================
    "
    "" Set extra options when running in GUI mode
    if has("gui_running")
    "    set guifont=Monaco:h14
    "    if has("gui_gtk2")   "GTK2
    "        set guifont=Monaco\ 12,Monospace\ 12
    "    endif
    "    set guioptions-=T
    "    set guioptions+=e
    "    set guioptions-=r
    "    set guioptions-=L
    "    set guitablabel=%M\ %t
    "    set showtabline=1
    "    set linespace=2
    "    set noimd
    "    set t_Co=256
    set guifont=DejaVu_Sans_Mono_for_Powerline:h12:cANSI:qDRAFT " 设置windows下的字体
    "set guifont=Consolas:h14:cANSI:qDRAFT
    endif
    "
    "
    "
    "" theme主题
    "set background=dark
    "set t_Co=256
    "
    "" colorscheme solarized
    "colorscheme molokai
    "" colorscheme desert
    "
    "
    " 设置标记一列的背景颜色和数字一行颜色一致
    hi! link SignColumn   LineNr
    hi! link ShowMarksHLl DiffAdd
    hi! link ShowMarksHLu DiffChange
    "
    " for error highlight，防止错误整行标红导致看不清
    highlight clear SpellBad
    "highlight SpellBad term=standout ctermfg=1 term=underline cterm=underline
    highlight clear SpellCap
    "highlight SpellCap term=underline cterm=underline
    highlight clear SpellRare
    "highlight SpellRare term=underline cterm=underline
    "highlight clear SpellLocal
    "highlight SpellLocal term=underline cterm=underline
    "
    "
    "k-vim add:

            "" 防止tmux下vim的背景色显示异常
            "" Refer: http://sunaku.github.io/vim-256color-bce.html
            ""if &term =~ '256color'
            "  " disable Background Color Erase (BCE) so that color schemes
            "  " render properly when inside 256-color tmux and GNU screen.
            "  " see also http://snk.tuxfamily.org/log/vim-256color-bce.html
            "  set t_ut=
            ""endif

" }

" {
    " Find merge conflict markers
    " go to merge conflict markers
    " already in spf13
    map <leader><leader>fc /\v^[<\|=>]{7}( .*\|$)<CR>

    "" => 选中及操作改键
    "
    "" 调整缩进后自动选中，方便再次操作
    "vnoremap < <gv
    "vnoremap > >gv
    "
    "" y$ -> Y Make Y behave like other capitals
    "map Y y$
    "
    "" 复制选中区到系统剪切板中
    vnoremap <leader>y "+y
    "
    "" auto jump to end of select
    "" vnoremap <silent> y y`]
    "" vnoremap <silent> p p`]
    "" nnoremap <silent> p p`]
    "
    "" select all
    "map <Leader>sa ggVG"
    "
    " select block
    nnoremap <leader>v V`}
" }
